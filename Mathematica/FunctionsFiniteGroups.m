(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
(* SetDirectory["Z:/Documents/math"];
<<FunctionsComplexAnalysis.m;
<<FunctionsMatrixAnalysis.m;
*)


(* ::Input::Initialization:: *)
(* create a list of products of element in list1 . element in list2 *)
(* first list1[[1]].list2, then list1[[2].list2 etc *)


(* ::Input::Initialization:: *)
ProductsOfLists = Module[{fir,list1,list2},
list1 = #1;
list2 = #2;
(fir = #;  Sequence@@(fir.# &/@ list2)) &/@ list1
]&;


(* ::Input::Initialization:: *)
(* create a list of products of element in scalar list1* list2 *)


(* ::Input::Initialization:: *)
ScalarsTimesList = Module[{fir,list1,list2},
list1 = #1;
list2 = #2;
(fir = #;  Sequence@@(fir*# &/@ list2)) &/@ list1
]&;


(* ::Input::Initialization:: *)
(* Takes a numerical complemment of two sets *)


(* ::Input::Initialization:: *)
ComplementN = Module[{FirstSet,SecondSet,NormLim,ElemNow,ElemsToDrop},
FirstSet = #1;
SecondSet=#2;
NormLim = #3;
(ElemNow = #;
ElemsToDrop=Sort[Flatten[Position[Round[1/NormLim*Norm[N[ElemNow-#]]] &/@ FirstSet,0]],Greater];
(FirstSet = Drop[FirstSet,{#}];) &/@ ElemsToDrop;) &/@ SecondSet;
FirstSet
]&;


(* ::Input::Initialization:: *)
(* Takes a numerical union of two sets *)


(* ::Input::Initialization:: *)
UnionN = Module[{TheSet,NormLim,ElemNow,ElemsToDrop,rema,ElemsKept,ElemsToKeep},
TheSet = Union[#1,#2];
NormLim = #3;
rema = TheSet; ElemsKept = {};
While[Length[rema]>0,
ElemNow = rema[[1]]; AppendTo[ElemsKept,ElemNow];
ElemsToDrop=Sort[Flatten[Position[Round[1/NormLim*Norm[N[ElemNow-#]]] &/@ rema,0]],Greater];
ElemsToKeep = Complement[Range[Length[rema]],ElemsToDrop];
rema = rema[[ElemsToKeep]];
];
ElemsKept
]&;


(* ::Input::Initialization:: *)
GenerateGroup = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = #1;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =LenNow =Length[Geners]; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Gg.# &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
elements
]&;


(* ::Input::Initialization:: *)
GenerateGroupSimplify = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = #1;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =LenNow =Length[Geners]; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(FullSimplify[Together[Expand[Gg.#]]] &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
elements
]&;

GenerateGroupExpand = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = #1;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =Length[Geners]; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Expand[toge[Expand[Gg.#]]] &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
elements
]&;


(* ::Input::Initialization:: *)
GenerateGroupN = Module[{Geners,MaxOrder,NormLim,elements,ordercount,ord,LenNow,LenOle,Gg,TruElems,ElemNow,ElemsToDrop},
Geners = #1 //N;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
NormLim = #3; (* How close two norms should be to declare two elements same*)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =Length[Geners]; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Gg.# &/@ Geners)) &/@elements,
SameTest->(Plus@@(Abs[Flatten[#1-#2]])< 0.0001&)]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
PrintTemporary[ord];
elements
]&;


(* ::Input::Initialization:: *)
GenerateGroupNlarge = Module[{Geners,MaxOrder,NormLim,elements,ordercount,ord,LenNow,LenOle,Gg,TruElems,ElemNow,ElemsToDrop,GenerSets,GenersNow},
Geners = #1 //N;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
NormLim = #3; (* How close two norms should be to declare two elements same*)
elements = Geners;
GenerSets = Partition[Geners,10,10,{1,1},{}];
ordercount = 0;
ord = {}; LenNow =LenNow =Length[Geners]; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
(GenersNow = #;
elements=Union[GenersNow, (Gg=#;Sequence@@(Gg.# &/@ GenersNow)) &/@elements,
SameTest->(Plus@@(Abs[Flatten[#1-#2]])< 0.0001&)]; 
PrintTemporary[Length[elements]];
) &/@ GenerSets;
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
PrintTemporary[ord];
elements
]&;


(* ::Input::Initialization:: *)
GenerateGroupNole = Module[{Geners,MaxOrder,NormLim,elements,ordercount,ord,LenNow,LenOle,Gg,TruElems,ElemNow,ElemsToDrop},
Geners = #1;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
NormLim = #3; (* How close two norms should be to declare two elements same*)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =0; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Simplify[toge[Expand[Gg.#]]] &/@ Geners)) &/@elements]; 
TruElems ={};
While[Length[elements]>0,
ElemNow = elements[[1]];
TruElems = Join[TruElems,{ElemNow}];
elements= Drop[elements,1];
ElemsToDrop=Sort[Flatten[Position[Round[1/NormLim*Norm[N[ElemNow-#]]] &/@ elements,0]],Greater];
(elements = Drop[elements,{#}];) &/@ ElemsToDrop;
];
elements = TruElems;
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
Simplify[elements]
]&;


(* ::Input::Initialization:: *)
GenerateGroup2Set = Module[{FirstSet,Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
FirstSet =#1;
Geners = #2;
MaxOrder=#3; (* How many times generators are multiplied with each other *)
elements = FirstSet;
ordercount = 0;
ord = {}; LenNow =0; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[FirstSet, (Gg=#;Sequence@@(Gg.# &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
elements
]&;


(* ::Input::Initialization:: *)
(* generates a matrix group from the generators, by multiplying them at most MaxNumber ofProducts times. Elements are mod 2. 
Prints out the order of the set of elements after each round of multiplications
Outputs the group *)
(* Middle is slow, has full simplify *)
(* Last uses sim, and numeric comparsion with third arg accuracy to determine if two elements are same *)


(* ::Input::Initialization:: *)
GenerateGroupMod2 = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = Mod[#1,2];
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =0; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Mod[Gg.#,2] &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
elements
]&;


(* ::Input::Initialization:: *)
GenerateGroupMod2silent = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = Mod[#1,2];
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =0; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Mod[Gg.#,2] &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
ord = Join[ord,{LenNow}]
];
elements
]&;


(* ::Input::Initialization:: *)
(* generates a LIST group from the generators, by multiplying them at most MaxNumber ofProducts times.  *) 



(* ::Input::Initialization:: *)
GenerateGroupList = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = #1;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =0; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Gg*# &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
elements
]&;


(* ::Input::Initialization:: *)
(* generates a LIST group from the generators, by ADDING them at most MaxNumber ofProducts times mod 2.  *) 



(* ::Input::Initialization:: *)
GenerateGroupListSumMod2 = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = #1;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =0; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Mod[Gg+#,2] &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
(* PrintTemporary[LenNow]; *)
ord = Join[ord,{LenNow}]
];
(* PrintTemporary[ord]; *)
elements
]&;


(* Find the set of left cosets modulo 2*)


LeftQuotientMod2 = Module[{group,subgroup,Cosets,Remains,TheCoset,normist,posi},
group=#1;
subgroup = #2;
Cosets = {}; Remains = group;
While[Length[Remains]>0, 
new = Remains[[1]];
TheCoset = Mod[new.#,2] &/@ subgroup; Remains = Complement[Remains,TheCoset];
(* take the smallest norm representative for the coset *)
normist = Norm[Flatten[#]] &/@ TheCoset;
posi = Position[normist,Min[normist]][[1,1]];
new = TheCoset[[posi]];
AppendTo[Cosets,new];
];
Cosets
]&;


(* Find the set of right cosets*)


RightQuotient = Module[{group,subgroup,Cosets,Remains,TheCoset,normist,posi},
group=#1;
subgroup = #2;
Cosets = {}; Remains = group;
While[Length[Remains]>0, 
new = Remains[[1]];
TheCoset = #.new &/@ subgroup; Remains = Complement[Remains,TheCoset];
(* take the smallest norm representative for the coset *)
normist = Norm[Flatten[#]] &/@ TheCoset;
posi = Position[normist,Min[normist]][[1,1]];
new = TheCoset[[posi]];
AppendTo[Cosets,new];
];
Cosets
]&;


(* Find the set of right cosets*)


RightQuotientN = Module[{group,subgroup,accu,Cosets,Remains,TheCoset,normist,posi},
group=#1;
subgroup = #2;
accu=#3;
Cosets = {}; Remains = group;
While[Length[Remains]>0, 
new = Remains[[1]];
TheCoset = #.N[new] &/@ subgroup; Remains = ComplementN[Remains,TheCoset,accu];
(* take the smallest norm representative for the coset *)
normist = Norm[Flatten[#]] &/@ TheCoset;
posi = Position[normist,Min[normist]][[1,1]];
new = TheCoset[[posi]];
AppendTo[Cosets,new];
];
Cosets
]&;


IsNormalSubgroupMod2 = Module[{group,subgroup,IsNormal,Remains,LeftCoset,RightCoset},
group =#1;
subgroup = #2;
IsNormal = True;
Remains = group;
While[IsNormal && Length[Remains]>0,
elem = Remains[[1]]; Remains = Drop[Remains,1];
LeftCoset = Mod[elem.#,2] &/@ subgroup;
RightCoset = Mod[#.elem,2] &/@ subgroup;
If[Length[Complement[LeftCoset,RightCoset]] >0,IsNormal=False]
];
IsNormal
]&;


(* ::Input::Initialization:: *)
(* generates a LIST group from the generators, by multiplying them at most MaxNumber ofProducts times.  *) 



(* ::Input::Initialization:: *)
GenerateGroupList = Module[{Geners,MaxOrder,elements,ordercount,ord,LenNow,LenOle,Gg},
Geners = #1;
MaxOrder=#2; (* How many times generators are multiplied with each other *)
elements = Geners;
ordercount = 0;
ord = {}; LenNow =0; LenOle = -1;
While[ordercount < MaxOrder && LenNow > LenOle,
ordercount=ordercount+1;
elements=Union[Geners, (Gg=#;Sequence@@(Gg*# &/@ Geners)) &/@elements]; 
LenOle = LenNow;
LenNow = Length[elements];
PrintTemporary[LenNow];
ord = Join[ord,{LenNow}]
];
Print[ord];
elements
]&;


(* ::Input::Initialization:: *)
FindCenter = Module[{Group,Centr,AllInxs,jj,RemainInxs,Cand,IndiCators,NonCenterElements},
Group = #1;
Centr={};
AllInxs = Table[jj,{jj,1,Length[Group]}];
RemainInxs = AllInxs ;
While[Length[RemainInxs]>0,
Cand=Group[[RemainInxs[[1]]]];
RemainInxs = Drop[RemainInxs,1];
IndiCators = Plus@@(Abs[Flatten[Chop[Cand.#-#.Cand]]]) &/@ N[Group];
If[Plus@@IndiCators< 0.000001,Centr=Join[Centr,{Cand}]];
(* All elements that do not commute with the current candidate *)
NonCenterElements = Complement[AllInxs,Flatten[Position[IndiCators,0]]];
(* Remove these from the list of candidates *)
RemainInxs = Complement[RemainInxs,NonCenterElements];
];
Centr
]&;


(* ::Input::Initialization:: *)
(* find the stabilizer of the projector ProjectionMatrix under the action of the Representation by conjugations *)


(* ::Input::Initialization:: *)
FindProjectiveStabilizer = Module[{Representation,ProjectorPoint,StabilizerIndexes},
Representation = #1;
ProjectorPoint = #2;
StabilizerIndexes = Position[If[Union[Expand[Together[Union[Flatten[(#.ProjectorPoint.HermConj[#] - ProjectorPoint)]]]]]=={0},0,1] &/@ Representation,0] //Flatten;
(* The Adjoint action Stabilizer of ProjectorPoint *)
Representation[[#]] &/@ StabilizerIndexes
]&;


(* ::Input::Initialization:: *)
Anticomm = Module[{First,Second},First = #1; Second = #2;First.Second + Second.First]&;


(* ::Input::Initialization:: *)
AnticommuteCheck = Module[{Fir,Sec},Fir = #1; Sec=#2; If[Union[Flatten[Anticomm[Fir,Sec]]]=={0},1,0]]&;
AnticommuteCheck[sig1,sig2]
AnticommuteCheck[unit2,sig2]


(* ::Input::Initialization:: *)
(* This is a direct representation of the group, not "EXtra-special", see Blanchfield thesis *)


(* ::Input::Initialization:: *)
WeylHeisenbergGenerators = Module[{dim,\[Omega],Z,X},
dim=#1;
\[Omega] = E^(2 Pi I/dim);
Z = DiagonalMatrix[Table[ \[Omega]^(ss),{ss,0,dim-1}]];
X = DiagonalMatrix[Table[1,{ss,1,dim}]];
X = RotateLeft[X];
{X,Z,\[Omega]}]&;



(* ::Input::Initialization:: *)
(* This is the group generated directly from the group generaotrs above*)


(* ::Input::Initialization:: *)
WeylHeisenbergGroup = Module[{dim,X,Z,\[Omega],inxs,inxsss},
dim=#1;
{X,Z,\[Omega]}=WeylHeisenbergGenerators[dim];
inxs = Table[jj,{jj,dim,1,-1}];
inxsss = Partition[Flatten[Outer[List,inxs,inxs,inxs]],3];
Simplify[\[Omega]^#[[3]] (Dot@@(Table[X,{#[[2]]}])). (Dot@@(Table[Z,{#[[1]]}]))] &/@ inxsss
]&;



